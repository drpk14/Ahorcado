package ahorcadohibernate;
// Generated 05-mar-2022 14:26:45 by Hibernate Tools 4.3.1

import ahorcado.HibernateUtil;
import java.util.Iterator;
import java.util.List;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;




/**
 * Usuario generated by hbm2java
 */
public class Usuario  implements java.io.Serializable {


     private String nombre;
     private String contrasenia;
     private Integer partidasJugadas;
     private Integer partidasGanadas;
     private Integer tiempoJugado;
     private String rol;

    public Usuario() {
    }

	
    public Usuario(String nombre) {
        this.nombre = nombre;
    }
    public Usuario(String nombre, String contrasenia) {
       this.nombre = nombre;
       this.contrasenia = contrasenia;
       this.partidasJugadas = 0;
       this.partidasGanadas = 0;
       this.tiempoJugado = 0;
       this.rol = "usuario";
    }
   
    public String getNombre() {
        return this.nombre;
    }
    
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
    public String getContrasenia() {
        return this.contrasenia;
    }
    
    public void setContrasenia(String contrasenia) {
        this.contrasenia = contrasenia;
    }
    public Integer getPartidasJugadas() {
        return this.partidasJugadas;
    }
    
    public void setPartidasJugadas(Integer partidasJugadas) {
        this.partidasJugadas = partidasJugadas;
    }
    public Integer getPartidasGanadas() {
        return this.partidasGanadas;
    }
    
    public void setPartidasGanadas(Integer partidasGanadas) {
        this.partidasGanadas = partidasGanadas;
    }
    public Integer getTiempoJugado() {
        return this.tiempoJugado;
    }
    
    public void setTiempoJugado(int tiempoJugado) {
        this.tiempoJugado = tiempoJugado;
    }
    
    public String getRol() {
        return this.rol;
    }
    
    public void setRol(String rol) {
        this.rol = rol;
    }

    public static boolean comprobarNombre(String nombreComprobar){
    
        Session session = HibernateUtil.getSessionFactory().openSession(); 
        Transaction tx = null;
 
        try{
            tx = session.beginTransaction(); 
 
            Query query = session.createQuery("FROM Usuario ");

            List<Usuario> usuarios = query.list(); 
            for (Iterator iterator = usuarios.iterator(); iterator.hasNext();){
                Usuario usuario = (Usuario) iterator.next();
                if(usuario.getNombre().equals(nombreComprobar)){
                    return true; 
                }
            } 
            tx.commit(); 
        }catch (HibernateException e) { 
            if (tx!=null) tx.rollback(); 
            e.printStackTrace();
        }finally {
            session.close();
        } 
        
        return false;
    }
    
    public static boolean comprobarContrasenia(String usuarioComprobar,String contraseniaComprobar){
    
        Session session = HibernateUtil.getSessionFactory().openSession(); 
        Transaction tx = null;
 
        try{
            tx = session.beginTransaction(); 
 
            Query query = session.createQuery("FROM Usuario WHERE nombre = :nombreParametro");
            
            query.setParameter("nombreParametro", usuarioComprobar);

            List<Usuario> usuarios = query.list();
            
            Usuario usuario = usuarios.get(0); 
            
            System.out.println("nombre usuario:"+usuario.getNombre());
            System.out.println("contraseña:" + usuario.getContrasenia());
            
            if(usuario.getContrasenia().equals(contraseniaComprobar)){
                    return true;  
            } 
            tx.commit(); 
        }catch (HibernateException e) { 
            if (tx!=null) tx.rollback(); 
            e.printStackTrace();
        }finally {
            session.close();
        } 
        
        return false;
    }
    
    public static Usuario devolverUsuario(String usuarioComprobar){
        Usuario usuario = null;
        Session session = HibernateUtil.getSessionFactory().openSession(); 
        Transaction tx = null;
 
        try{
            tx = session.beginTransaction(); 
 
            Query query = session.createQuery("FROM Usuario WHERE nombre = :nombreParametro");
            
            query.setParameter("nombreParametro", usuarioComprobar);

            List<Usuario> usuarios = query.list();
            
            usuario = usuarios.get(0); 
            tx.commit(); 
        }catch (HibernateException e) { 
            if (tx!=null) tx.rollback(); 
            e.printStackTrace();
        }finally {
            session.close();
        } 
        
        return usuario;
    }
    
    public static void añadirUsuario(String nombre, String contrasenia){
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;  
        try{
            tx = session.beginTransaction(); 
            session.save(new Usuario(nombre,contrasenia));
            tx.commit();
        }catch (HibernateException e) { 
            if (tx!=null) tx.rollback();
                e.printStackTrace();
        }finally {
            session.close();
        } 

    } 
}


